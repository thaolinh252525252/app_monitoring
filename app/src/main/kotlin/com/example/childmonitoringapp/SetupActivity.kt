package com.example.childmonitoringapp

import android.Manifest
import android.app.Activity
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.projection.MediaProjectionManager
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.childmonitoringapp.service.MonitoringService
import java.io.File

class SetupActivity : AppCompatActivity() {

    private val TAG = "SetupActivity"
    private val REQ_PERMS = 100
    private val REQ_CAPTURE = 101

    private lateinit var mpm: MediaProjectionManager

    // Poll ki·ªÉm tra tr·ª£ nƒÉng ƒë√£ b·∫≠t ch∆∞a
    private val accHandler = android.os.Handler(android.os.Looper.getMainLooper())
    private val accPoll = object : Runnable {
        override fun run() {
            if (isAccessibilityEnabled()) {
                Toast.makeText(this@SetupActivity, "ƒê√£ b·∫≠t Tr·ª£ nƒÉng cho ·ª©ng d·ª•ng", Toast.LENGTH_SHORT).show()
                accHandler.removeCallbacks(this)
            } else {
                accHandler.postDelayed(this, 500)
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_setup)

        mpm = getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager

        // N√∫t xin quy·ªÅn (mic + phone state + screen capture)
        findViewById<Button>(R.id.btn_setup).setOnClickListener {
            checkAndRequestPermissions()
        }

        // N√∫t m·ªü trang Tr·ª£ nƒÉng
        findViewById<Button>(R.id.btn_open_accessibility).setOnClickListener {
            openAccessibilitySettings()
            startAccPoll()
        }

        // Ghi probe ƒë·ªÉ b·∫°n test adb ls
        val dir = getExternalFilesDir(Environment.DIRECTORY_MOVIES)!!
        dir.mkdirs()
        File(dir, "probe.txt").writeText("ok ${System.currentTimeMillis()}")
        Log.i("SRCHECK", "probe wrote: ${dir.absolutePath}")
    }

    private fun checkAndRequestPermissions() {
        val need = mutableListOf(
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.READ_PHONE_STATE
        ).apply {
            if (Build.VERSION.SDK_INT >= 33) add(Manifest.permission.POST_NOTIFICATIONS)
        }.filter { ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED }

        if (need.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, need.toTypedArray(), REQ_PERMS)
        } else {
            requestScreenCapture()
        }
    }

    override fun onRequestPermissionsResult(req: Int, perms: Array<out String>, res: IntArray) {
        super.onRequestPermissionsResult(req, perms, res)
        if (req == REQ_PERMS) {
            if (res.all { it == PackageManager.PERMISSION_GRANTED }) {
                requestScreenCapture()
            } else {
                Toast.makeText(this, "Vui l√≤ng c·∫•p ƒë·ªß quy·ªÅn ƒë·ªÉ ti·∫øp t·ª•c", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun requestScreenCapture() {
        try {
            val intent = mpm.createScreenCaptureIntent()
            startActivityForResult(intent, REQ_CAPTURE)
        } catch (e: Exception) {
            Log.e(TAG, "requestScreenCapture error: ${e.message}")
            Toast.makeText(this, "L·ªói khi y√™u c·∫ßu quay m√†n h√¨nh", Toast.LENGTH_LONG).show()
        }
    }

    // üëâ G·ª¨I TOKEN CHO SERVICE, ƒë·ªÉ Service GI·ªÆ MediaProjection
    override fun onActivityResult(req: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(req, resultCode, data)
        if (req == REQ_CAPTURE) {
            if (resultCode == Activity.RESULT_OK && data != null) {
                // B∆°m projection v√†o Service
                val svc = Intent(this, MonitoringService::class.java).apply {
                    action = MonitoringService.ACTION_SET_PROJECTION
                    putExtra("resultCode", resultCode)
                    putExtra("projectionData", data)
                }
                androidx.core.content.ContextCompat.startForegroundService(this, svc)

                Toast.makeText(
                    this,
                    "ƒê√£ xin quy·ªÅn quay m√†n h√¨nh. B·∫≠t Tr·ª£ nƒÉng ƒë·ªÉ b·∫Øt ƒë·∫ßu theo app.",
                    Toast.LENGTH_LONG
                ).show()

                // M·ªü trang Tr·ª£ nƒÉng ngay cho ng∆∞·ªùi d√πng b·∫≠t
                openAccessibilitySettings()
                startAccPoll() // (n·∫øu b·∫°n ƒë√£ c√≥ h√†m poll n√†y)
            } else {
                Toast.makeText(this, "B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn quay m√†n h√¨nh", Toast.LENGTH_LONG).show()
            }
        }
    }


    // M·ªü trang chi ti·∫øt n·∫øu ROM h·ªó tr·ª£, kh√¥ng th√¨ fallback trang Tr·ª£ nƒÉng chung
    private fun openAccessibilitySettings() {
        val detail = Intent("android.settings.ACCESSIBILITY_DETAILS_SETTINGS").apply {
            data = android.net.Uri.parse("package:$packageName")
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
        try {
            if (detail.resolveActivity(packageManager) != null) {
                startActivity(detail)
            } else {
                startActivity(
                    Intent(android.provider.Settings.ACTION_ACCESSIBILITY_SETTINGS)
                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                )
            }
        } catch (e: Exception) {
            Log.e(TAG, "openAccessibilitySettings error: ${e.message}")
            Toast.makeText(this, "Kh√¥ng m·ªü ƒë∆∞·ª£c C√†i ƒë·∫∑t Tr·ª£ nƒÉng", Toast.LENGTH_LONG).show()
        }
    }

    private fun isAccessibilityEnabled(): Boolean {
        val me = ComponentName(this, AccessibilityMonitorService::class.java).flattenToString()
        val enabled = android.provider.Settings.Secure.getString(
            contentResolver,
            android.provider.Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        ) ?: return false
        val am = getSystemService(Context.ACCESSIBILITY_SERVICE) as android.view.accessibility.AccessibilityManager
        return enabled.split(':').any { it.equals(me, ignoreCase = true) } && am.isEnabled
    }

    private fun startAccPoll() {
        accHandler.removeCallbacks(accPoll)
        accHandler.postDelayed(accPoll, 500)
    }

    override fun onDestroy() {
        super.onDestroy()
        accHandler.removeCallbacks(accPoll)
    }
}
